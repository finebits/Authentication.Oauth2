Desktop:
            var config = new GoogleConfiguration
            {
                ClientId = "104997621620-6p1oehme41t1vss7stvoc5ge0siqsltu.apps.googleusercontent.com",
                ClientSecret = "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",
                RedirectUri = new Uri(redirectURI),
                ScopeList = new[] { "profile", "email" }
            };



{
                {
                    MailAssistantId.Gmail, new Auth.Assistants.Mail.Types.GmailConfiguration()
                    {
                        ClientId = "104997621620-ge9a2lrflv6cjqsppi970opknqc7a1gg.apps.googleusercontent.com",
                        RedirectUri = "com.tuvimail.test:/oauth2redirect",
                    }
                },
                {
                    MailAssistantId.Yandex , new Auth.Assistants.Mail.Types.YandexMailConfiguration()
                    {
                        ClientId = "0131320dda214e99bd080500fc1f7f30",
                        ClientSecret = "5ca9bdc81ad041c680df5900cfe63723",
                        RedirectUri = "tuvimailtest://test.tuvimail.com",
                        DeviceId = Auth.CrossPlatform.Toolkit.DeviceId.Get()
                    }
                },
                {
                    MailAssistantId.Mailru , new Auth.Assistants.Mail.Types.MailruConfiguration()
                    {
                        ClientId = "e1dbfeada3a54c298f317c0247d226a4",
                        ClientSecret = "a6632f7b300641aa81858494a8b48fca",
                        UserAgent = new List<ProductInfoHeaderValue>() { new ProductInfoHeaderValue("TuviMail","1.0")},
                        RedirectUri = "com.finebits.tuvimail://redirect",
                    }
                },
                {
                    MailAssistantId.Yahoo, new Auth.Assistants.Mail.Types.YahooMailConfiguration()
                    {
                        ClientId = "dj0yJmk9U25CUnQ3alpBNUdQJmQ9WVdrOVlrNVNXakpaTkhFbWNHbzlNQS0tJnM9Y29uc3VtZXJzZWNyZXQmc3Y9MCZ4PTc0",
                        ClientSecret = "1ca4803893217a6fb849a5e86127572befc30ab9",
                        RedirectUri = "tuvimailtest://test.tuvimail.com"
                    }
                },
                {
                     MailAssistantId.Outlook, new Auth.Assistants.Mail.Types.Outlook.Configuration()
                    {
                        ClientId = "b1565062-355a-4b2c-a4dd-0fc8da01e7dc",
#if NETFX_CORE
                        RedirectUri = "tuvimailtest://test.tuvimail.com",
#elif __ANDROID__
                        RedirectUri = "msauth://com.tuvimail.test/XFkdPz8ER0%2FPz8%2FXWVTPz8%2FPzkK%3D",
#elif __IOS__
                        RedirectUri = "msauth.com.tuvimail.test://auth",
#else
                        RedirectUri = "tuvimailtest://test.tuvimail.com",
#endif
            
                    }
                },
                {
                     MailAssistantId.Outlook365, new Auth.Assistants.Mail.Types.Outlook365.Configuration()
                    {
                        ClientId = "b1565062-355a-4b2c-a4dd-0fc8da01e7dc",
#if NETFX_CORE
                        RedirectUri = "tuvimailtest://test.tuvimail.com",
#elif __ANDROID__
                        RedirectUri = "msauth://com.tuvimail.test/XFkdPz8ER0%2FPz8%2FXWVTPz8%2FPzkK%3D",
#elif __IOS__
                        RedirectUri = "msauth.com.tuvimail.test://auth",
#else
                        RedirectUri = "tuvimailtest://test.tuvimail.com",
#endif
            
                    }
                }
};



public class GmailConfiguration : GoogleConfiguration
{
    /// <inheritdoc cref="AssistantConfigurationBase.Scope"/>
    public override string[] Scope { get; set; } = new string[]
    {
        "https://mail.google.com/",
        "profile",
        "email"
    };

    /// <inheritdoc cref="AssistantConfigurationBase.CallbackUri"/>
    public override string CallbackUri { get => RedirectUri; }
}

public abstract class GoogleConfiguration : AssistantConfigurationBase
{
    /// <inheritdoc cref="AssistantConfigurationBase.Scope"/>
    public override string[] Scope { get; set; } = new string[] { "profile", "email" };

    /// <summary>
    /// Determines how authorization server sends a response to the application.
    /// </summary>
    public virtual string CallbackUri { get; set; } = "https://accounts.google.com/o/oauth2/approval";
}


public abstract class MailruConfiguration : AssistantConfigurationBase
{
    public string ClientSecret { get; set; }

    public IReadOnlyList<ProductInfoHeaderValue> UserAgent { get; set; }

    /// <inheritdoc cref="AssistantConfigurationBase.Scope"/>
    public override string[] Scope { get; set; } = new string[]
    {
        "userinfo",
        "mail.imap"
    };
    public bool IsForceConfirm { get; internal set; } = true;
}

public class YahooMailConfiguration : YahooConfiguration
{
    /// <inheritdoc cref="YahooConfiguration.Scope"/>
    public override string[] Scope { get; set; } = new string[]
    {
        // "mail-r",
        // "mail-w",
        "profile",
        "email"
    };
}

public class Configuration : MicrosoftConfiguration
{
    /// <summary>
    /// The list of permissions required by the application to access resources on behalf of the user.
    /// <see href="https://docs.microsoft.com/en-us/previous-versions/office/office-365-api/api/version-2.0/use-outlook-rest-api#using-windows-live-scopes-and-outlook-rest-api-to-access-outlookcom-mailbox-data"> 
    /// Using Windows Live scopes to access Outlook.com mailbox data.
    /// </see>
    /// </summary>
    public override string[] Scope { get; set; } = new string[]
    {
        "wl.offline_access",
        "wl.basic",
        "wl.emails",
        "wl.imap"
    };
}

public class Configuration : MicrosoftConfiguration
{
    /// <summary>
    /// The list of permissions required by the application to access resources on behalf of the user.
    /// <see href="https://docs.microsoft.com/en-us/exchange/client-developer/legacy-protocols/how-to-authenticate-an-imap-pop-smtp-application-by-using-oauth">
    /// Exchange Server. Authenticate an IMAP, POP or SMTP connection using OAuth
    /// </see>
    /// </summary>
    public override string[] Scope { get; set; } = new string[]
    {
        "offline_access",
        "https://outlook.office.com/user.read",
        "https://outlook.office.com/IMAP.AccessAsUser.All",
        "https://outlook.office.com/SMTP.Send",
    };
}

public abstract class MicrosoftConfiguration : AssistantConfigurationBase
{
    /// <summary>
    /// The {tenant} value in the path of the request can be used to control 
    /// who can sign into the application. The allowed values are common, organizations, consumers, 
    /// and tenant identifiers.
    /// </summary>
    public string Tenant { get; set; } = "common"; // common, organizations, consumers

    /// <inheritdoc cref="AssistantConfigurationBase.Scope"/>
    public override string[] Scope { get; set; } = new string[]
    {
        "offline_access",
        "https://graph.microsoft.com/user.read",
    };

    /// <summary>
    /// Indicates the type of user interaction that is required. 
    /// The only valid values at this time are login, none, select_account, and consent.
    /// </summary>
    public MicrosoftAuthPrompt Prompt { get; set; } = MicrosoftAuthPrompt.SelectAccount;
}
